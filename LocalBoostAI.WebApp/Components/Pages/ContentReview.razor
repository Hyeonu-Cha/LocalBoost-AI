@page "/content-review"
@using LocalBoostAI.WebApp.Models
@using LocalBoostAI.WebApp.Services
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IContentGenerationService ContentGenerationService

<h3>Content Review</h3>

@if (generatedContent != null)
{
    <EditForm Model="@generatedContent" OnValidSubmit="SaveChanges">
        <div class="card">
            <div class="card-header">
                Blog Post
            </div>
            <div class="card-body">
                <InputTextArea @bind-Value="generatedContent.BlogPost" class="form-control" rows="10" />
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header">
                Social Media Posts
            </div>
            <div class="card-body">
                @for (int i = 0; i < generatedContent.SocialMediaPosts.Length; i++)
                {
                    <div class="input-group mb-2">
                        <InputTextArea @bind-Value="generatedContent.SocialMediaPosts[i]" class="form-control" rows="3" />
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => CopyToClipboard(generatedContent.SocialMediaPosts[i])">Copy</button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <button class="btn btn-success" @onclick="ApproveContent">Approve</button>
            <button class="btn btn-danger" @onclick="RegenerateContent">Regenerate</button>
        </div>
    </EditForm>

    <div class="mt-3">
        <label>Feedback:</label>
        <InputTextArea @bind-Value="feedback" class="form-control" rows="3" />
    </div>
}
else
{
    <p>No content available for review.</p>
}

@code {
    private GeneratedContent generatedContent;
    private string feedback;
    private const string ContentFilePath = "..\\..\\..\\content.json";

    protected override void OnInitialized()
    {
        if (File.Exists(ContentFilePath))
        {
            var json = File.ReadAllText(ContentFilePath);
            generatedContent = JsonSerializer.Deserialize<GeneratedContent>(json);
        }
    }

    private void SaveChanges()
    {
        var json = JsonSerializer.Serialize(generatedContent);
        File.WriteAllText(ContentFilePath, json);
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", text);
    }

    private void ApproveContent()
    {
        Console.WriteLine("Content approved!");
    }

    private async Task RegenerateContent()
    {
        await ContentGenerationService.RegenerateContentAsync();
        // In a real application, we would wait for the new content to be generated
        // and then refresh the page.
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
